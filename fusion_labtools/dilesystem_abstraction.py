from abc import ABC, abstractmethod
from typing import List

class CloudFilesystemInterface(ABC):
    def connect(self, credentials: dict): ...
    def disconnect(self): ...
    def check_connection(self) -> bool: ...
    def get_user_identity(self) -> str: ...
    
    def upload_file(self, local_path: str, remote_path: str): ...
    def download_file(self, remote_path: str, local_path: str): ...
    def upload_folder(self, local_folder: str, remote_prefix: str): ...
    def download_folder(self, remote_prefix: str, local_folder: str): ...
    def list(self, prefix: str) -> List[str]: ...
    def exists(self, remote_path: str) -> bool: ...
    def get_metadata(self, remote_path: str) -> dict: ...
    def delete(self, remote_path: str): ...
    def move(self, src_path: str, dst_path: str): ...
    def copy(self, src_path: str, dst_path: str): ...

    def get_checksum(self, remote_path: str) -> str: ...
    def compare_checksum(self, local_path: str, remote_path: str) -> bool: ...
    def sync(self, local_path: str, remote_path: str, direction: str): ...
    def diff(self, local_path: str, remote_path: str) -> dict: ...
    
    def get_permissions(self, remote_path: str): ...
    def set_permissions(self, remote_path: str, policy: dict): ...
    def generate_presigned_url(self, remote_path: str, ttl: int) -> str: ...
    def log_operation(self, user_id: str, operation: str, path: str): ...

class S3Interface(CloudFilesystemInterface):
    def connect(self, credentials: dict): ...
    def disconnect(self): ...
    def check_connection(self) -> bool: ...
    def get_user_identity(self) -> str: ...
    
    def upload_file(self, local_path: str, remote_path: str): ...
    def download_file(self, remote_path: str, local_path: str): ...
    def upload_folder(self, local_folder: str, remote_prefix: str): ...
    def download_folder(self, remote_prefix: str, local_folder: str): ...
    def list(self, prefix: str) -> List[str]: ...
    def exists(self, remote_path: str) -> bool: ...
    def get_metadata(self, remote_path: str) -> dict: ...
    def delete(self, remote_path: str): ...
    def move(self, src_path: str, dst_path: str): ...
    def copy(self, src_path: str, dst_path: str): ...
